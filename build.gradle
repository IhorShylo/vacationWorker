plugins {
    id 'java'
}

group 'org.bat2'
version '1.0-SNAPSHOT'
sourceCompatibility = '17'


repositories {
    mavenCentral()
}
configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
    invoker
}

dependencies {
    // Every function needs this dependency to get the Functions Framework API.
    implementation 'com.google.cloud.functions:functions-framework-api:1.0.4'

    // To run function locally using Functions Framework's local invoker
    invoker 'com.google.cloud.functions.invoker:java-function-invoker:1.1.1'

    // These dependencies are only used by the tests.
    testImplementation 'org.junit.jupiter:junit-jupiter:5.9.0'
    testImplementation 'org.mockito:mockito-junit-jupiter:4.8.0'
    testImplementation 'com.google.truth:truth:1.1.3'


    compileOnly 'org.projectlombok:lombok:1.18.24'
    annotationProcessor 'org.projectlombok:lombok:1.18.24'

    // https://mvnrepository.com/artifact/com.fasterxml.jackson.core/jackson-annotations
    implementation 'com.fasterxml.jackson.core:jackson-annotations:2.13.4'
    // https://mvnrepository.com/artifact/com.fasterxml.jackson.core/jackson-databind
    implementation 'com.fasterxml.jackson.core:jackson-databind:2.13.4'


}
test {
    useJUnitPlatform()
}

// Register a "runFunction" task to run the function locally
tasks.register("runFunction", JavaExec) {
    main = 'com.google.cloud.functions.invoker.runner.Invoker'
    classpath(configurations.invoker)
    inputs.files(configurations.runtimeClasspath, sourceSets.main.output)
    args(
            '--target', project.findProperty('run.functionTarget') ?: 'org.bat2.vacationworker.functions.VacationWorkerFunction',
            '--port', project.findProperty('run.port') ?: 8080
    )
    doFirst {
        args('--classpath', files(configurations.runtimeClasspath, sourceSets.main.output).asPath)
    }
}